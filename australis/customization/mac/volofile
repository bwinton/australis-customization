/*global define, console, process */

define(function (require) {
  'use strict';

  return {
    build: {
      flags: {
        //Does not print the build output.
        'q': 'quiet'
      },

      run: function (d, v, namedArgs) {
        var buildDir = 'www-built';
        var buildJs = 'tools/build.js';

        //Remove the old dir
        v.rm(buildDir);

        var indexName = buildDir + '/js/app.js';
        var contents = v.read(indexName);
        var pathsRegExp = /(paths:{)([^}]+)(})/;

        contents = contents.replace(pathsRegExp,
          function (match, pre, paths, post) {
            return pre + JSON.stringify(buildOpts.paths) + post;
          });

        v.write(indexName, contents);
        v.spawn('node', ['tools/r.js', '-o', buildJs], {
          useConsole: !namedArgs.quiet
        }).then(function() {
          var buildOpts = JSON.parse(v.read(buildJs));

          d.resolve("Done!");
        });
      }
    },

    deploy: {
      depends: ['build'],
      run: function (d, v, namedArgs) {
        d.resolve(v.spawn('rsync',
          ['-avz', '--delete', '-e', 'ssh', 'www-built/',
           'bwinton@people.mozilla.com:~/public_html/australis/customization/mac'
          ], { useConsole: !namedArgs.quiet }));
      }
    }
  }
});